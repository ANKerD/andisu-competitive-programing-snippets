'.source.cpp, .source.cc':
	'2D point + functions':
		'prefix': '_cp_2d_point'
		'body': """
		struct point{
			ld x, y;
			point(ld _x, ld _y){x = _x, y=_y;}
			point operator -(point a){ return point(x-a.x,y-a.y); }
			bool operator == (point p){return x==p.x&&y==p.y;}
		};
		"""
	'Geometric Utils':
		'prefix': '_cp_geometric_utils'
		'body': """
			ld inline cross(point p, point q){ return p.x*q.y - p.y*q.x;}
			ld inline dist(point p1, point p2){ return hypot(p2.x-p1.x, p2.y-p1.y);}
			point inline toVec(point p, point q){ return point(q.x-p.x, q.y-p.y);}
			bool inline ccw(point p, point q, point r){
				// Use >= 0 for collinear points.
				return cross(toVec(p, q), toVec(p, r)) > 0;
			}
			ld dot(point a, point b){ return a.x*b.x+a.y*b.y; }
			ld norm_sq(point a){ return a.x*a.x+a.y*a.y;}
			bool inline collinear(point p, point q, point r){ return fabs(cross(toVec(p, q), toVec(p, r)))<EPS;}

		"""
	'Is point inside polygon':
		'prefix': '_cp_inside_polygon'
		'body': """
			bool inPolygon(point pt, const vector<point> &P){
				if((int)P.size()==0) return 1;
				ld sum = 0;
				for(int i = 0; i < ((int)P.size())-1;i++){
					// for point in the vertice of polygon
					// if(pt == P[i]) return true;
					if(ccw(pt, P[i], P[i+1]))
						sum += angle(P[i], pt, P[i+1]);
					else
						sum -= angle(P[i], pt, P[i+1]);
				}
				return fabs(fabs(sum)-2*PI) < EPS;
			}
		"""
	'Convex Hull // include geomtry utils first':
		'prefix': '_cp_convex_hull'
		'body': """
			// In case of negative coords, substitute for the lowest X and Y
			point pivot(-1, -1);

			bool inline cmp(point a, point b){
				if(collinear(pivot, a, b)) return dist(pivot, a) < dist(pivot, b);
				ld d1x = a.x - pivot.x, d1y = a.y - pivot.y;
				ld d2x = b.x - pivot.x, d2y = b.y - pivot.y;
				return (atan2(d1y, d1x)-atan2(d2y, d2x))<0;
			}

			vector<point> inline get_convex_hull(vector<point> P){
				register int i, j, n = P.size();
				if(n <= 3){
					if(!(P[0] == P[n-1])) P.push_back(P[0]);
					return P;
				}
				int P0 = 0;
				for(i=0; i<n;i++){
					if(P[i].y < P[P0].y || P[i].y == P[P0].y & P[i].x > P[P0].x) P0=i;
				}
				swap(P[0], P[P0]);
				pivot = P[0];
				sort(++P.begin(),P.end(), cmp);
				vector<point> S;
				S.push_back(P[n-1]);
				S.push_back(P[0]);
				S.push_back(P[1]);
				i=2;
				while(i<n){
					j=S.size()-1;
					if(ccw(S[j-1], S[j], P[i])) S.push_back(P[i++]);
					else S.pop_back();
				}
				return S;
			}

		"""
